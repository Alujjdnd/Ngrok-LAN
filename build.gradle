plugins {
	alias(libs.plugins.quilt.loom)
	id 'maven-publish'
	id 'com.github.johnrengelman.shadow' version '7.1.2'
	id 'java'
	id "com.modrinth.minotaur" version "2.+"
}

archivesBaseName = project.archives_base_name
version = project.version
group = project.maven_group

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/" }
}

// All the dependencies are declared at gradle/libs.version.toml and referenced with "libs.<id>"
// See https://docs.gradle.org/current/userguide/platforms.html for information on how version catalogs work.
dependencies {
	minecraft libs.minecraft
	mappings loom.layered {
		addLayer quiltMappings.mappings("org.quiltmc:quilt-mappings:${libs.versions.quilt.mappings.get()}:v2")
		// officialMojangMappings() // Uncomment if you want to use Mojang mappings as your primary mappings, falling back on QM for parameters and Javadocs
	}
	modImplementation libs.quilt.loader

	// QSL is not a complete API; You will need Quilted Fabric API to fill in the gaps.
	// Quilted Fabric API will automatically pull in the correct QSL version.
	modImplementation libs.quilted.fabric.api

	// Java-Ngrok, a wrapper for the Ngrok service by providing a handy Java API to call it.
	modImplementation(include("com.github.alexdlaird:java-ngrok:${libs.versions.java.ngrok.get()}"))
	// Cloth config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${libs.versions.cloth.config.get()}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	// Mod menu
	modImplementation(include("com.terraformersmc:modmenu:${libs.versions.modmenu.get()}"))
}

processResources {
	inputs.property "version", version

	filesMatching('quilt.mod.json') {
		expand "version": version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from("LICENSE") {
		rename { "${it}_${archivesBaseName}" }
	}
}

shadowJar {
	manifest {
		attributes 'Main-Class': 'com.example.ApplicationKt'
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

import com.modrinth.minotaur.dependencies.ModDependency
modrinth {
	token = System.getenv("MODRINTH_TOKEN") // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
	projectId = "oTa1qz6R"
	versionNumber = version // You don't need to set this manually. Will fail if Modrinth has this version already
	versionType = "release" // This is the default
	uploadFile = remapJar // With Fabric Loom or Architectury Loom, this MUST be set to `remapJar` instead of `jar`!
	gameVersions = [libs.versions.minecraft] // Must be an array, even with only one version
	loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Fabric Loom or ForgeGradle
	dependencies = [
			new ModDependency("mOgUt4GM", "required")
	]
}
